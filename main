import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import minimize

# Define the optimization problem
def objective_function(x):
    return (x[0] - 2) ** 2 + (x[1] - 3) ** 2

def quantum_inspired_geo(num_iterations, num_candidates):
    num_variables = 2  # Number of decision variables
    population = np.random.uniform(low=-10, high=10, size=(num_candidates, num_variables))

    # Arrays to store evolution data for visualization
    evolution_data = []
    fitness_data = []

    for iteration in range(num_iterations):
        for i in range(num_candidates):
            # Quantum-inspired crossover (classical random crossover)
            indices = np.random.choice(range(num_candidates), size=2, replace=False)
            parent1, parent2 = population[indices]

            # Apply crossover operator (classical random crossover)
            offspring = 0.5 * (parent1 + parent2)

            # Evaluate the fitness of the new candidate solution
            offspring_fitness = objective_function(offspring)
            parent_fitness = objective_function(population[i])

            # Update the population if the offspring has better fitness
            if offspring_fitness < parent_fitness:
                population[i] = offspring

        # Record evolution data for visualization
        best_solution = min(population, key=objective_function)
        evolution_data.append(best_solution)
        best_fitness = objective_function(best_solution)
        fitness_data.append(best_fitness)
    
    return best_solution, best_fitness, evolution_data, fitness_data


# Set the algorithm parameters
num_iterations = 100
num_candidates = 20

# Run the Quantum-inspired GEO algorithm
best_solution, best_fitness, evolution_data, fitness_data = quantum_inspired_geo(num_iterations, num_candidates)

# Visualization: Objective Function Contour Plot
x = np.linspace(-10, 10, 100)
y = np.linspace(-10, 10, 100)
X, Y = np.meshgrid(x, y)
Z = (X - 2) ** 2 + (Y - 3) ** 2

plt.contourf(X, Y, Z, levels=20, cmap='viridis')
plt.colorbar(label='Objective Function')
plt.scatter(*zip(*evolution_data), c='red', label='Evolution of Solutions')
plt.scatter(*best_solution, c='green', marker='x', label='Best Solution')
plt.xlabel('x[0]')
plt.ylabel('x[1]')
plt.legend()
plt.title('Quantum-inspired GEO - Objective Function and Solution Evolution')
plt.show()

# Visualization: Fitness Value Evolution
plt.plot(range(num_iterations), fitness_data, marker='o')
plt.xlabel('Iteration')
plt.ylabel('Best Fitness')
plt.title('Quantum-inspired GEO - Fitness Value Evolution')
plt.show()

# Print the results
print("Best solution:", best_solution)
print("Best fitness:", best_fitness)

